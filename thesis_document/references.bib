@inproceedings{WinderixHans,
journal = {2021 IEEE European Symposium on Security and Privacy (EuroS&P)},
year = {2021},
title = {Compiler-Assisted Hardening of Embedded Software Against Interrupt Latency Side-Channel Attacks},
author = {Winderix, Hans and Mühlberg, Jan Tobias and Piessens, frank},
}

@inproceedings{MSP430Detection,
author = {Pouyanrad, Sepideh and M\"{u}hlberg, Jan Tobias and Joosen, Wouter},
title = {SCFMSP: Static Detection of Side Channels in MSP430 Programs},
year = {2020},
isbn = {9781450388337},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3407023.3407050},
doi = {10.1145/3407023.3407050},
abstract = {Information leakage through side-channels poses a serious threat to the security of distributed systems. Recent research on countermeasures against side-channel attacks show that, on embedded platforms with predictable execution times, certain classes of these vulnerabilities can be detected and mitigated automatically by means of language-based security techniques. In this paper, we propose a security type system to statically analyse MSP430 assembly programs to detecting information leakage through novel interrupt-latency attacks (a.k.a. Nemesis), timing side-channels, and undesired information flow. We have implemented our technique in a tool, Side Channel FinderMSP, which automatically verifies MSP430 object-code programs to be free of such vulnerabilities. We evaluate the effectiveness of our tool by applying it to a representative set of vulnerable and benign programs. Our experiments demonstrate that the tool is both effective in detecting vulnerabilities, and scalable to realistic applications.},
booktitle = {Proceedings of the 15th International Conference on Availability, Reliability and Security},
articleno = {21},
numpages = {10},
keywords = {static analysis, nemesis attack, side channel analysis, assembly programs, embedded devices, language-based security, MSP430},
location = {Virtual Event, Ireland},
series = {ARES '20}
}

@inproceedings{Nemesis,
author = {Van Bulck, Jo and Piessens, Frank and Strackx, Raoul},
title = {Nemesis: Studying Microarchitectural Timing Leaks in Rudimentary CPU Interrupt Logic},
year = {2018},
isbn = {9781450356930},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3243734.3243822},
doi = {10.1145/3243734.3243822},
abstract = {Recent research on transient execution vulnerabilities shows that current processors exceed our levels of understanding. The prominent Meltdown and Spectre attacks abruptly revealed fundamental design flaws in CPU pipeline behavior and exception handling logic, urging the research community to systematically study attack surface from microarchitectural interactions. We present Nemesis, a previously overlooked side-channel attack vector that abuses the CPU's interrupt mechanism to leak microarchitectural instruction timings from enclaved execution environments such as Intel SGX, Sancus, and TrustLite. At its core, Nemesis abuses the same subtle microarchitectural behavior that enables Meltdown, i.e., exceptions and interrupts are delayed until instruction retirement. We show that by measuring the latency of a carefully timed interrupt, an attacker controlling the system software is able to infer instruction-granular execution state from hardware-enforced enclaves. In contrast to speculative execution vulnerabilities, our novel attack vector is applicable to the whole computing spectrum, from small embedded sensor nodes to high-end commodity x86 hardware. We present practical interrupt timing attacks against the open-source Sancus embedded research processor, and we show that interrupt latency reveals microarchitectural instruction timings from off-the-shelf Intel SGX enclaves. Finally, we discuss challenges for mitigating Nemesis-type attacks at the hardware and software levels.},
booktitle = {Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security},
pages = {178–195},
numpages = {18},
keywords = {enclave, meltdown, SGX, controlled-channel, microarchitecture},
location = {Toronto, Canada},
series = {CCS '18}
}

@article{dominator,
author = {Lengauer, Thomas and Tarjan, Robert Endre},
title = {A Fast Algorithm for Finding Dominators in a Flowgraph},
year = {1979},
issue_date = {July 1979},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {1},
number = {1},
issn = {0164-0925},
url = {https://doi.org/10.1145/357062.357071},
doi = {10.1145/357062.357071},
abstract = {A fast algorithm for finding dominators in a flowgraph is presented. The algorithm uses 
depth-first search and an efficient method of computing functions defined on paths in trees. A simple implementation of the algorithm runs in O(m log n) time, where m is the number of edges and n is the number of vertices in the problem graph. A more sophisticated implementation runs in O(mα(m, n)) time, where α(m, n) is a functional inverse of Ackermann's function.Both versions of the algorithm were implemented in Algol W, a Stanford University version of Algol, and tested on an IBM 370/168. The programs were compared with an implementation by Purdom and Moore of a straightforward O(mn)-time algorithm, and with a bit vector algorithm described by Aho and Ullman. The fast algorithm beat the straightforward algorithm and the bit vector algorithm on all but the smallest graphs tested.},
journal = {ACM Trans. Program. Lang. Syst.},
month = jan,
pages = {121–141},
numpages = {21}
}

@article{Dinesh2020RetroWriteSI,
  title={RetroWrite: Statically Instrumenting COTS Binaries for Fuzzing and Sanitization},
  author={S. Dinesh and N. Burow and D. Xu and M. Payer},
  journal={2020 IEEE Symposium on Security and Privacy (SP)},
  year={2020},
  pages={1497-1511}
}

@inproceedings{uops,
  title = {uops.info: Characterizing Latency, Throughput, and Port Usage of Instructions on Intel Microarchitectures},
  acmid = {3304062},
  address = {New York, NY, USA},
  author = {Abel, Andreas and Reineke, Jan},
  booktitle = {ASPLOS},
  doi = {10.1145/3297858.3304062},
  isbn = {978-1-4503-6240-5},
  location = {Providence, RI, USA},
  numpages = {14},
  pages = {673--686},
  publisher = {ACM},
  series = {ASPLOS '19},
  year = {2019},
  url = {http://doi.acm.org/10.1145/3297858.3304062}
}

@misc{hexhive,
 title={HexHive/retrowrite},
 url={https://github.com/HexHive/retrowrite},
 journal={GitHub},
 author={HexHive}}
 
@book{intel-ref-manual,
 title={Intel® 64 and IA-32 Architectures Optimization Reference Manual},
 journal={https://software.intel.com/content/www/us/en/develop/download/intel-64-and-ia-32-architectures-optimization-reference-manual.html}}

@misc{fog_2021, 
	title={Instruction tables:Lists of instruction latencies, throughputs and micro-operation breakdowns for Intel, AMD, and VIA CPUs}, url={https://www.agner.org/optimize/instruction_tables.pdf}, journal={www.agner.org}, author={Fog, Agner}, year={2021}, month={Mar}}