@inproceedings{WinderixHans,
journal = {2021 IEEE European Symposium on Security and Privacy (EuroS&P)},
year = {2021},
title = {Compiler-Assisted Hardening of Embedded Software Against Interrupt Latency Side-Channel Attacks},
author = {Winderix, Hans and Mühlberg, Jan Tobias and Piessens, frank},
}

@inproceedings{MSP430Detection,
author = {Pouyanrad, Sepideh and M\"{u}hlberg, Jan Tobias and Joosen, Wouter},
title = {SCFMSP: Static Detection of Side Channels in MSP430 Programs},
year = {2020},
isbn = {9781450388337},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3407023.3407050},
doi = {10.1145/3407023.3407050},
abstract = {Information leakage through side-channels poses a serious threat to the security of distributed systems. Recent research on countermeasures against side-channel attacks show that, on embedded platforms with predictable execution times, certain classes of these vulnerabilities can be detected and mitigated automatically by means of language-based security techniques. In this paper, we propose a security type system to statically analyse MSP430 assembly programs to detecting information leakage through novel interrupt-latency attacks (a.k.a. Nemesis), timing side-channels, and undesired information flow. We have implemented our technique in a tool, Side Channel FinderMSP, which automatically verifies MSP430 object-code programs to be free of such vulnerabilities. We evaluate the effectiveness of our tool by applying it to a representative set of vulnerable and benign programs. Our experiments demonstrate that the tool is both effective in detecting vulnerabilities, and scalable to realistic applications.},
booktitle = {Proceedings of the 15th International Conference on Availability, Reliability and Security},
articleno = {21},
numpages = {10},
keywords = {static analysis, nemesis attack, side channel analysis, assembly programs, embedded devices, language-based security, MSP430},
location = {Virtual Event, Ireland},
series = {ARES '20}
}

@inproceedings{Nemesis,
author = {Van Bulck, Jo and Piessens, Frank and Strackx, Raoul},
title = {Nemesis: Studying Microarchitectural Timing Leaks in Rudimentary CPU Interrupt Logic},
year = {2018},
isbn = {9781450356930},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3243734.3243822},
doi = {10.1145/3243734.3243822},
abstract = {Recent research on transient execution vulnerabilities shows that current processors exceed our levels of understanding. The prominent Meltdown and Spectre attacks abruptly revealed fundamental design flaws in CPU pipeline behavior and exception handling logic, urging the research community to systematically study attack surface from microarchitectural interactions. We present Nemesis, a previously overlooked side-channel attack vector that abuses the CPU's interrupt mechanism to leak microarchitectural instruction timings from enclaved execution environments such as Intel SGX, Sancus, and TrustLite. At its core, Nemesis abuses the same subtle microarchitectural behavior that enables Meltdown, i.e., exceptions and interrupts are delayed until instruction retirement. We show that by measuring the latency of a carefully timed interrupt, an attacker controlling the system software is able to infer instruction-granular execution state from hardware-enforced enclaves. In contrast to speculative execution vulnerabilities, our novel attack vector is applicable to the whole computing spectrum, from small embedded sensor nodes to high-end commodity x86 hardware. We present practical interrupt timing attacks against the open-source Sancus embedded research processor, and we show that interrupt latency reveals microarchitectural instruction timings from off-the-shelf Intel SGX enclaves. Finally, we discuss challenges for mitigating Nemesis-type attacks at the hardware and software levels.},
booktitle = {Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security},
pages = {178–195},
numpages = {18},
keywords = {enclave, meltdown, SGX, controlled-channel, microarchitecture},
location = {Toronto, Canada},
series = {CCS '18}
}

@article{dominator,
author = {Lengauer, Thomas and Tarjan, Robert Endre},
title = {A Fast Algorithm for Finding Dominators in a Flowgraph},
year = {1979},
issue_date = {July 1979},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {1},
number = {1},
issn = {0164-0925},
url = {https://doi.org/10.1145/357062.357071},
doi = {10.1145/357062.357071},
abstract = {A fast algorithm for finding dominators in a flowgraph is presented. The algorithm uses 
depth-first search and an efficient method of computing functions defined on paths in trees. A simple implementation of the algorithm runs in O(m log n) time, where m is the number of edges and n is the number of vertices in the problem graph. A more sophisticated implementation runs in O(mα(m, n)) time, where α(m, n) is a functional inverse of Ackermann's function.Both versions of the algorithm were implemented in Algol W, a Stanford University version of Algol, and tested on an IBM 370/168. The programs were compared with an implementation by Purdom and Moore of a straightforward O(mn)-time algorithm, and with a bit vector algorithm described by Aho and Ullman. The fast algorithm beat the straightforward algorithm and the bit vector algorithm on all but the smallest graphs tested.},
journal = {ACM Trans. Program. Lang. Syst.},
month = jan,
pages = {121–141},
numpages = {21}
}

@article{Dinesh2020RetroWriteSI,
  title={RetroWrite: Statically Instrumenting COTS Binaries for Fuzzing and Sanitization},
  author={S. Dinesh and N. Burow and D. Xu and M. Payer},
  journal={2020 IEEE Symposium on Security and Privacy (SP)},
  year={2020},
  pages={1497-1511}
}

@inproceedings{uops,
  title = {uops.info: Characterizing Latency, Throughput, and Port Usage of Instructions on Intel Microarchitectures},
  acmid = {3304062},
  address = {New York, NY, USA},
  author = {Abel, Andreas and Reineke, Jan},
  booktitle = {ASPLOS},
  doi = {10.1145/3297858.3304062},
  isbn = {978-1-4503-6240-5},
  location = {Providence, RI, USA},
  numpages = {14},
  pages = {673--686},
  publisher = {ACM},
  series = {ASPLOS '19},
  year = {2019},
  url = {http://doi.acm.org/10.1145/3297858.3304062}
}

@misc{hexhive,
 title={HexHive/retrowrite},
 url={https://github.com/HexHive/retrowrite},
 journal={GitHub},
 author={HexHive}}
 
@book{intel-ref-manual,
 title={Intel® 64 and IA-32 Architectures Optimization Reference Manual},
 journal={https://software.intel.com/content/www/us/en/develop/download/intel-64-and-ia-32-architectures-optimization-reference-manual.html}}

@misc{fog_2021, 
	title={Instruction tables:Lists of instruction latencies, throughputs and micro-operation breakdowns for Intel, AMD, and VIA CPUs}, url={https://www.agner.org/optimize/instruction_tables.pdf}, journal={www.agner.org}, author={Fog, Agner}, year={2021}, month={Mar}}
	
@inbook{psma,
author = {Strackx, Raoul and Noorman, Job and Verbauwhede, Ingrid and Preneel, Bart and Piessens, Frank},
year = {2013},
month = {01},
pages = {241-251},
title = {Protected Software Module Architectures},
isbn = {978-3-658-03370-5},
doi = {10.1007/978-3-658-03371-2_21}
}

@ARTICLE{trusted-computing-architectures,
  author={Maene, Pieter and Götzfried, Johannes and de Clercq, Ruan and Müller, Tilo and Freiling, Felix and Verbauwhede, Ingrid},
  journal={IEEE Transactions on Computers}, 
  title={Hardware-Based Trusted Computing Architectures for Isolation and Attestation}, 
  year={2018},
  volume={67},
  number={3},
  pages={361-374},
  doi={10.1109/TC.2017.2647955}}
  
 @inproceedings{trustlite,
author = {Koeberl, Patrick and Schulz, Steffen and Varadharajan, Vijay and Sadeghi, Ahmad-Reza},
year = {2014},
month = {04},
pages = {},
title = {TrustLite: A Security Architecture for Tiny Embedded Devices},
doi = {10.1145/2592798.2592824}
}

@article{smart,
author = {Eldefrawy, Karim and Perito, Daniele and Tsudik, Gene},
year = {2012},
month = {01},
pages = {},
title = {SMART: Secure and Minimal Architecture for (Establishing a Dynamic) Root of Trust}
}

@inproceedings{isox,
author = {Evtyushkin, Dmitry and Elwell, Jesse and Ozsoy, Meltem and Ponomarev, Dmitry and Ghazaleh, Nael Abu and Riley, Ryan},
title = {Iso-X: A Flexible Architecture for Hardware-Managed Isolated Execution},
year = {2014},
isbn = {9781479969982},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/MICRO.2014.25},
doi = {10.1109/MICRO.2014.25},
abstract = {We consider the problem of how to provide an execution environment where the application's secrets are safe even in the presence of malicious system software layers. We propose Iso-X --- a flexible, fine-grained hardware-supported framework that provides isolation for security-critical pieces of an application such that they can execute securely even in the presence of untrusted system software. Isolation in Iso-X is achieved by creating and dynamically managing compartments to host critical fragments of code and associated data. Iso-X provides fine-grained isolation at the memory-page level, flexible allocation of memory, and a low-complexity, hardware-only trusted computing base. Iso-X requires minimal additional hardware, a small number of new ISA instructions to manage compartments, and minimal changes to the operating system which need not be in the trusted computing base. The run-time performance overhead of Iso-X is negligible and even the overhead of creating and destroying compartments is modest. Iso-X offers higher memory flexibility than the recently proposed SGX design from Intel, allowing both fluid partitioning of the vailable memory space and dynamic growth of compartments. An FPGA implementation of Iso-X runtime mechanisms shows a negligible impact on the processor cycle time.},
booktitle = {Proceedings of the 47th Annual IEEE/ACM International Symposium on Microarchitecture},
pages = {190–202},
numpages = {13},
keywords = {isolated execution, hardware security},
location = {Cambridge, United Kingdom},
series = {MICRO-47}
}

@article{10.1145/2499368.2451146,
author = {Hofmann, Owen S. and Kim, Sangman and Dunn, Alan M. and Lee, Michael Z. and Witchel, Emmett},
title = {InkTag: Secure Applications on an Untrusted Operating System},
year = {2013},
issue_date = {April 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {48},
number = {4},
issn = {0362-1340},
url = {https://doi.org/10.1145/2499368.2451146},
doi = {10.1145/2499368.2451146},
abstract = {InkTag is a virtualization-based architecture that gives strong safety guarantees to high-assurance processes even in the presence of a malicious operating system. InkTag advances the state of the art in untrusted operating systems in both the design of its hypervisor and in the ability to run useful applications without trusting the operating system. We introduce paraverification, a technique that simplifies the InkTag hypervisor by forcing the untrusted operating system to participate in its own verification. Attribute-based access control allows trusted applications to create decentralized access control policies. InkTag is also the first system of its kind to ensure consistency between secure data and metadata, ensuring recoverability in the face of system crashes.},
journal = {SIGPLAN Not.},
month = mar,
pages = {265–278},
numpages = {14},
keywords = {paraverification, application protection, virtualization-based security}
}

@inproceedings{inktag,
author = {Hofmann, Owen S. and Kim, Sangman and Dunn, Alan M. and Lee, Michael Z. and Witchel, Emmett},
title = {InkTag: Secure Applications on an Untrusted Operating System},
year = {2013},
isbn = {9781450318709},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2451116.2451146},
doi = {10.1145/2451116.2451146},
abstract = {InkTag is a virtualization-based architecture that gives strong safety guarantees to high-assurance processes even in the presence of a malicious operating system. InkTag advances the state of the art in untrusted operating systems in both the design of its hypervisor and in the ability to run useful applications without trusting the operating system. We introduce paraverification, a technique that simplifies the InkTag hypervisor by forcing the untrusted operating system to participate in its own verification. Attribute-based access control allows trusted applications to create decentralized access control policies. InkTag is also the first system of its kind to ensure consistency between secure data and metadata, ensuring recoverability in the face of system crashes.},
booktitle = {Proceedings of the Eighteenth International Conference on Architectural Support for Programming Languages and Operating Systems},
pages = {265–278},
numpages = {14},
keywords = {application protection, virtualization-based security, paraverification},
location = {Houston, Texas, USA},
series = {ASPLOS '13}
}

@article{sancus,
  title    = {Sancus 2.0: {A} Low-Cost Security Architecture for {I}o{T} Devices},
  author   = {Noorman, Job and Van Bulck, Jo and M{\"u}hlberg, Jan Tobias and Piessens, Frank and Maene, Pieter and Preneel, Bart and Verbauwhede, Ingrid and G{\"o}tzfried, Johannes and M{\"u}ller, Tilo and Freiling, Felix},
  journal  = {ACM Transactions on Privacy and Security (TOPS)},
  volume   = {20},
  number   = {3},
  pages    = {7:1--7:33},
  month    = {September},
  year     = {2017}
}

@inproceedings{sgx,
author = {McKeen, Frank and Alexandrovich, Ilya and Berenzon, Alex and Rozas, Carlos V. and Shafi, Hisham and Shanbhogue, Vedvyas and Savagaonkar, Uday R.},
title = {Innovative Instructions and Software Model for Isolated Execution},
year = {2013},
isbn = {9781450321181},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2487726.2488368},
doi = {10.1145/2487726.2488368},
abstract = {For years the PC community has struggled to provide secure solutions on open platforms. Intel has developed innovative new technology to enable SW developers to develop and deploy secure applications on open platforms. The technology enables applications to execute with confidentiality and integrity in the native OS environment. It does this by providing ISA extensions for generating hardware enforceable containers at a granularity determined by the developer. These containers while opaque to the operating system are managed by the OS. This paper analyzes the threats and attacks to applications. It then describes the ISA extension for generating a HW based container. Finally it describes the programming model of this container.},
booktitle = {Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy},
articleno = {10},
numpages = {1},
location = {Tel-Aviv, Israel},
series = {HASP '13}
}

@article{xu,
  title={Controlled-Channel Attacks: Deterministic Side Channels for Untrusted Operating Systems},
  author={Yuanzhong Xu and Weidong Cui and Marcus Peinado},
  journal={2015 IEEE Symposium on Security and Privacy},
  year={2015},
  pages={640-656}
}

@unknown{Busi,
author = {Busi, Matteo and Noorman, Job and Van Bulck, Jo and Galletta, Letterio and Degano, Pierpaolo and Mühlberg, Jan and Piessens, Frank},
year = {2020},
month = {01},
pages = {},
title = {Provably Secure Isolation for Interruptible Enclaved Execution on Small Microprocessors: Extended Version}
}

