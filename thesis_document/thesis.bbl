\begin{thebibliography}{10}

\bibitem{intel-ref-manual}
{\em Intel® 64 and IA-32 Architectures Optimization Reference Manual}.

\bibitem{uops}
A.~Abel and J.~Reineke.
\newblock uops.info: Characterizing latency, throughput, and port usage of
  instructions on intel microarchitectures.
\newblock In {\em ASPLOS}, ASPLOS '19, pages 673--686, New York, NY, USA, 2019.
  ACM.

\bibitem{Barthe}
G.~Barthe, B.~Grégoire, and V.~Laporte.
\newblock Secure compilation of side-channel countermeasures: The case of
  cryptographic “constant-time”.
\newblock In {\em 2018 IEEE 31st Computer Security Foundations Symposium
  (CSF)}, pages 328--343, 2018.

\bibitem{side-channel}
S.~Bhunia and M.~Tehranipoor.
\newblock Chapter 8 - side-channel attacks.
\newblock In S.~Bhunia and M.~Tehranipoor, editors, {\em Hardware Security},
  pages 193--218. Morgan Kaufmann, 2019.

\bibitem{verify-constant-time}
S.~Blazy, D.~Pichardie, and A.~Trieu.
\newblock {Verifying Constant-Time Implementations by Abstract Interpretation}.
\newblock In {\em {European Symposium on Research in Computer Security}}, 22nd
  European Symposium on Research in Computer Security, Oslo, Norway, Sept.
  2017.

\bibitem{busi}
M.~Busi, J.~Noorman, J.~Van~Bulck, L.~Galletta, P.~Degano, J.~Mühlberg, and
  F.~Piessens.
\newblock Provably secure isolation for interruptible enclaved execution on
  small microprocessors: Extended version, 01 2020.

\bibitem{instruction-punning}
B.~Chamith, B.~J. Svensson, L.~Dalessandro, and R.~R. Newton.
\newblock Instruction punning: Lightweight instrumentation for x86-64.
\newblock {\em SIGPLAN Not.}, 52(6):320–332, June 2017.

\bibitem{Dinesh2020RetroWriteSI}
S.~Dinesh, N.~Burow, D.~Xu, and M.~Payer.
\newblock Retrowrite: Statically instrumenting cots binaries for fuzzing and
  sanitization.
\newblock {\em 2020 IEEE Symposium on Security and Privacy (SP)}, pages
  1497--1511, 2020.

\bibitem{E9Patch}
G.~J. Duck, X.~Gao, and A.~Roychoudhury.
\newblock Binary rewriting without control flow recovery.
\newblock In {\em Proceedings of the 41st ACM SIGPLAN Conference on Programming
  Language Design and Implementation}, PLDI 2020, page 151–163, New York, NY,
  USA, 2020. Association for Computing Machinery.

\bibitem{smart}
K.~Eldefrawy, D.~Perito, and G.~Tsudik.
\newblock Smart: Secure and minimal architecture for (establishing a dynamic)
  root of trust.
\newblock 01 2012.

\bibitem{isox}
D.~Evtyushkin, J.~Elwell, M.~Ozsoy, D.~Ponomarev, N.~A. Ghazaleh, and R.~Riley.
\newblock Iso-x: A flexible architecture for hardware-managed isolated
  execution.
\newblock In {\em Proceedings of the 47th Annual IEEE/ACM International
  Symposium on Microarchitecture}, MICRO-47, page 190–202, USA, 2014. IEEE
  Computer Society.

\bibitem{fog_2021}
A.~Fog.
\newblock Instruction tables:lists of instruction latencies, throughputs and
  micro-operation breakdowns for intel, amd, and via cpus, Mar 2021.

\bibitem{hexhive}
HexHive.
\newblock Hexhive/retrowrite.

\bibitem{nemesisrepo}
jovanbulck.
\newblock jovanbulck/nemesis.

\bibitem{trustlite}
P.~Koeberl, S.~Schulz, V.~Varadharajan, and A.-R. Sadeghi.
\newblock Trustlite: A security architecture for tiny embedded devices.
\newblock 04 2014.

\bibitem{dominator}
T.~Lengauer and R.~E. Tarjan.
\newblock A fast algorithm for finding dominators in a flowgraph.
\newblock {\em ACM Trans. Program. Lang. Syst.}, 1(1):121–141, Jan. 1979.

\bibitem{trusted-computing-architectures}
P.~Maene, J.~Götzfried, R.~de~Clercq, T.~Müller, F.~Freiling, and
  I.~Verbauwhede.
\newblock Hardware-based trusted computing architectures for isolation and
  attestation.
\newblock {\em IEEE Transactions on Computers}, 67(3):361--374, 2018.

\bibitem{SGX}
F.~McKeen, I.~Alexandrovich, A.~Berenzon, C.~V. Rozas, H.~Shafi, V.~Shanbhogue,
  and U.~R. Savagaonkar.
\newblock Innovative instructions and software model for isolated execution.
\newblock In {\em Proceedings of the 2nd International Workshop on Hardware and
  Architectural Support for Security and Privacy}, HASP '13, New York, NY, USA,
  2013. Association for Computing Machinery.

\bibitem{programcounter}
D.~Molnar, M.~Piotrowski, D.~Schultz, and D.~Wagner.
\newblock The program counter security model: Automatic detection and removal
  of control-flow side channel attacks.
\newblock In D.~H. Won and S.~Kim, editors, {\em Information Security and
  Cryptology - ICISC 2005}, pages 156--168, Berlin, Heidelberg, 2006. Springer
  Berlin Heidelberg.

\bibitem{sancus}
J.~Noorman, J.~Van~Bulck, J.~T. M{\"u}hlberg, F.~Piessens, P.~Maene,
  B.~Preneel, I.~Verbauwhede, J.~G{\"o}tzfried, T.~M{\"u}ller, and F.~Freiling.
\newblock Sancus 2.0: {A} low-cost security architecture for {I}o{T} devices.
\newblock {\em ACM Transactions on Privacy and Security (TOPS)},
  20(3):7:1--7:33, September 2017.

\bibitem{MSP430Detection}
S.~Pouyanrad, J.~T. M\"{u}hlberg, and W.~Joosen.
\newblock Scfmsp: Static detection of side channels in msp430 programs.
\newblock In {\em Proceedings of the 15th International Conference on
  Availability, Reliability and Security}, ARES '20, New York, NY, USA, 2020.
  Association for Computing Machinery.

\bibitem{microsbs}
M.~Salehi, D.~Hughes, and B.~Crispo.
\newblock msbs: Static binary sanitization of bare-metal embedded devices for
  fault observability.
\newblock pages 381--395. USENIX Association, 2020.

\bibitem{sancussupport}
sancus tee.
\newblock sancus-tee/sancus-support.

\bibitem{psma}
R.~Strackx, J.~Noorman, I.~Verbauwhede, B.~Preneel, and F.~Piessens.
\newblock {\em Protected Software Module Architectures}, pages 241--251.
\newblock 01 2013.

\bibitem{Nemesis}
J.~Van~Bulck, F.~Piessens, and R.~Strackx.
\newblock Nemesis: Studying microarchitectural timing leaks in rudimentary cpu
  interrupt logic.
\newblock In {\em Proceedings of the 2018 ACM SIGSAC Conference on Computer and
  Communications Security}, CCS '18, page 178–195, New York, NY, USA, 2018.
  Association for Computing Machinery.

\bibitem{rewriting-survey}
M.~Wenzl, G.~Merzdovnik, J.~Ullrich, and E.~Weippl.
\newblock From hack to elaborate technique—a survey on binary rewriting.
\newblock {\em ACM Comput. Surv.}, 52(3), June 2019.

\bibitem{WinderixHans}
H.~Winderix, J.~T. Mühlberg, and f.~Piessens.
\newblock Compiler-assisted hardening of embedded software against interrupt
  latency side-channel attacks.
\newblock 2021.

\bibitem{Xu}
Y.~Xu, W.~Cui, and M.~Peinado.
\newblock Controlled-channel attacks: Deterministic side channels for untrusted
  operating systems.
\newblock {\em 2015 IEEE Symposium on Security and Privacy}, pages 640--656,
  2015.

\end{thebibliography}
